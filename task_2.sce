disp('--- (©) Alexei Dergunov, 2009 ---');

//----------------------------------------
disp('----------- Задание 2 -----------');
//----------------------------------------

funcprot(0);
a = 1.1; disp(a, 'параметр a');
b = -1; disp(b, 'параметр b');
alpha = 0.02; disp(alpha, 'уровень значимости');
gam = 0.95; disp(gam, 'доверительная вероятность');
n = 400; disp(n, 'объем выборки');

function[y] = f(x) // Общее показательное распределение E(a,b)
  if x>=b, y = a*exp(-a*(x-b));
  else,    y = 0;
  end;
endfunction

// выборка случайной величины X~E(a,b)
X = grand(1,n,'exp',1/a);
X(1:n) = X(1:n) + b;

MX = b + 1/a; disp(MX, 'мат. ожидание');
DX = 1 / a^2; disp(DX, 'дисперсия');


//------------------------------------------------------
disp('');
disp('Задание 2.1');

function[k,u,nu] = drawHistogram(X) // построение графиков
  
  k = floor(1 + 3.32*log10(n)) + 1; // число интервалов
  u = zeros(1,k+1); // границы интервалов
  nu = zeros(1,k); // частоты интервалов
  
  // вычисление границ интервалов
  u(1) = min(X);
  u(k+1) = max(X);
  du = (u(k+1) - u(1)) / k;
  for i = 2 : k,
    u(i) = u(i-1) + du;
  end;

  // вычисление частот интервалов
  for i = 1 : n,
    for j = 1 : k-1,
      if u(j)<=X(i) & X(i)<u(j+1),
        nu(j) = nu(j)+1;
        break;
      end;
    end;
    if u(k)<=X(i) & X(i)<=u(k+1),
      nu(k) = nu(k)+1;
    end;
  end;

  h = zeros(1,k+2); // высоты
  p = zeros(1,k); // относительные частоты интервалов
  uu = zeros(1,k+2); // центры интервалов
  
  // вычисление высот, относительных частот интервалов
  // и центров интервалов
  h(1) = 0;
  h(k+2) = 0;
  uu(1) = u(1) - du/2;
  uu(k+2) = u(k+1) + du/2;
  for i = 1 : k,
    p(i) = nu(i) / n;
    uu(i+1) = (u(i) + u(i+1)) / 2;
    h(i+1) = p(i) / du;
  end;

  disp(u,'границы интервалов');
  disp(nu,'частоты интервалов');
  disp(p,'относительные частоты интервалов');
  disp(sum(nu),'сумма частот');
  disp(sum(p),'сумма относительных частот');
  disp(h(2:k+1),'высоты столбцов гистограммы');
  disp(f(uu(2:k+1)),..
  'теоретическая плотность в серединах интервалов');

  // построение графиков
  histplot(k, X, 2, rect=[u(1)-du, 0, u(k+1)+du, max(h)+0.02]);
    // гистограмма
  x = [b : 0.0001 : u(k+1)+du]; // значения x для теоретической
                                     // плотности вероятностей
                                     // (blue)
  plot2d(uu, h, 1); // полигон частот
                    // (black)                                   
  plot2d(x, f(x), 5); // теоретическая плотность вероятностей
                      // (red)
endfunction

[k,u,nu] = drawHistogram(X);
disp('графики построены!');


//------------------------------------------------------
disp('');
disp('Задание 2.2');

xsr = mean(X);
disp(xsr, 'выборочное среднее');
disp(abs(MX - xsr), '|MX - x(среднее)|');
s2 = mean(X^2) - xsr^2;
disp(s2, 'выборочная дисперсия');
disp(abs(DX-s2), '|DX - s^2|');


//------------------------------------------------------
disp('');
disp('Задание 2.3');
teta1 = 1 / sqrt(s2);
disp(teta1, 'параметр a, полученный с помощью метода моментов');
disp(abs(teta1-a), 'отклонение параметра a');
teta2 = xsr - sqrt(s2);
disp(teta2, 'параметр b, полученный с помощью метода моментов');
disp(abs(teta2-b), 'отклонение параметра b');


//------------------------------------------------------
disp('');
disp('Задание 2.4');

c = cdfnor("X", 0, 1, (1+gam)/2, 1-(1+gam)/2);
  // (1+gamma)/2 - квантиль N(0,1)
disp('параметры неизвестны');
_mxl = xsr - c * sqrt(s2 / n);
_mxr = xsr + c * sqrt(s2 / n);
disp([_mxl,_mxr],'доверительный интервал для мат.ожидания');
disp(MX,'мат. ожидание');
_dxl = s2 - c * sqrt((cmoment(X,4) - s2^2) / n);
_dxr = s2 + c * sqrt((cmoment(X,4) - s2^2) / n);
disp([_dxl,_dxr],'доверительный интервал для дисперсии');
disp(DX,'дисперсия');


//------------------------------------------------------
disp('');
disp('Задание 2.5');

_u = zeros(1,k+1); // границы интервалов
_nu = zeros(1,k); // частоты интервалов

// вычисление новых интервалов и частот
_u(1) = u(1);
i = 0; // cчетчик старых значений
j = 0; // счетчик новых значений
while i<k,
  j = j + 1;
  while (_nu(j)<5 & i<k),
    i = i + 1;
    _nu(j) = _nu(j) + nu(i);
  end;
  _u(j+1)=u(i+1);
  if (i==k & _nu(j)<5),
    _nu(j-1)=_nu(j-1)+_nu(j);
    _u(j) = _u(j+1);
    _nu(j) = 0;
    _u(j+1) = 0;
    j = j - 1;
  end;
end;

function [y] = F(x) // функция распределения
                    // параметры a=teta1, b=teta2
  if x >= teta2, y = 1 - exp(-teta1*(x-teta2));
  else,          y = 0;
  end;
endfunction

old_p = zeros(1,k); // старая теор. вероятность
for i = 1 : k,
  old_p(i) = F(u(i+1)) - F(u(i));
end;
disp(u,'границы старых интервалов');
disp(old_p,'теор. вероятности старых интервалов');

N = j;          disp(N, 'новое число интервалов');
_u = _u(1:N+1); disp(_u, 'новые границы интервалов');
_nu = _nu(1:N); disp(_nu, 'новые частоты интервалов');
_p = _nu / n; disp(_p, 'новые отн. частоты интервалов');

// теоретическая вероятность
p = zeros(1,N);
for i = 1 : N,
  p(i) = F(_u(i+1)) - F(_u(i));
end;

disp(p, 'теоретические вероятности новых интервалов');
disp(sum(_nu),'сумма новых частот');
disp(sum(_p),'сумма новых отн. частот');

function [ans] = stat(N,u,p) // статистика критерия hi^2
  ans = 0;
  for i = 1 : N,
    ans = ans + (_nu(i)-n*p(i))^2 / (n*p(i));
  end
endfunction

hi_2_alpha_0_98 = .. // распределение hi^2 ..
                  .. // alpha = 0.98; n <= 10 ..
[ 5.412,  7.824,  9.837, 11.668, 13.388,..
 15.033, 16.622, 18.168, 19.679, 21.161]';

r = 2; // число неизвестных параметров
h = hi_2_alpha_0_98(N - 1 - r); // порог

t = stat(N,_u,p);
disp('параметры неизвестны');
if t >= h,
  disp([t,h],..
  'гипотеза отвержена (t >= h)');
else
  disp([t,h],..
  'гипотеза принята (t < h)');
end;
