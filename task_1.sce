disp('--- (©) Alexei Dergunov, 2009 ---');

//----------------------------------------
disp('----------- Задание 1 -----------');
//----------------------------------------

funcprot(0);
n = 400; disp(n, 'объем выборки');
a = 2.75; disp(a, 'мат. ожидание');
d = 6.5; disp(d, 'дисперсия');
gam = 0.96; disp(gam, 'доверительная вероятность');
alpha = 0.01; disp(alpha, 'уровень значимости');

function[y] = f(x) // нормальный закон распределения N(a,d)
  y = (1/sqrt(2*%pi*d)) * exp(-(x-a)^2 / (2*d));
endfunction

// выборка случайной величины X~N(a,d)
X = grand(1,n,'nor',a,sqrt(d));


//------------------------------------------------------
disp('');
disp('Задание 1.1');

function[k,u,nu] = drawHistogram(X) // построение графиков
  
  k = floor(1 + 3.32*log10(n)) + 1; // число интервалов
  u = zeros(1,k+1); // границы интервалов
  nu = zeros(1,k); // частоты интервалов
  
  // вычисление границ интервалов
  u(1) = min(X);
  u(k+1) = max(X);
  du = (u(k+1) - u(1)) / k;
  for i = 2 : k,
    u(i) = u(i-1) + du;
  end;

  // вычисление частот интервалов
  for i = 1 : n,
    for j = 1 : k-1,
      if u(j)<=X(i) & X(i)<u(j+1),
        nu(j) = nu(j)+1;
        break;
      end;
    end;
    if u(k)<=X(i) & X(i)<=u(k+1),
      nu(k) = nu(k)+1;
    end;
  end;

  h = zeros(1,k+2); // высоты
  p = zeros(1,k); // относительные частоты интервалов
  uu = zeros(1,k+2); // центры интервалов
  
  // вычисление высот, относительных частот интервалов
  // и центров интервалов
  h(1) = 0;
  h(k+2) = 0;
  uu(1) = u(1) - du/2;
  uu(k+2) = u(k+1) + du/2;
  for i = 1 : k,
    p(i) = nu(i) / n;
    uu(i+1) = (u(i) + u(i+1)) / 2;
    h(i+1) = p(i) / du;
  end;

  disp(u,'границы интервалов');
  disp(nu,'частоты интервалов');
  disp(p,'относительные частоты интервалов');
  disp(sum(nu),'сумма частот');
  disp(sum(p),'сумма относительных частот');
  disp(h(2:k+1),'высоты столбцов гистограммы');
  disp(f(uu(2:k+1)),..
  'теоретическая плотность в серединах интервалов');

  // построение графиков
  histplot(k, X, style=2, rect=[u(1)-du, 0, u(k+1)+du, max(h)+0.02]);
    // гистограмма
  x = [u(1)-du : 0.0001 : u(k+1)+du]; // значения x для теоретической
                                     // плотности вероятностей
                                     // (blue)
  plot2d(uu, h, 1); // полигон частот
                    // (black)                                   
  plot2d(x, f(x), 5); // теоретическая плотность вероятностей
                      // (red)
endfunction

[k,u,nu]=drawHistogram(X);
disp('графики построены!');


//------------------------------------------------------
disp('');
disp('Задание 1.2');

xsr = mean(X);
disp(xsr, 'выборочное среднее');
disp(abs(a - xsr), '|MX - x(среднее)|');
s2 = mean(X^2) - xsr^2;
disp(s2, 'выборочная дисперсия');
disp(abs(d-s2), '|DX - s^2|');


//------------------------------------------------------
disp('');
disp('Задание 1.3');

disp(xsr, 'оценка мат. ожидания');
disp(abs(a - xsr), '|MX - teta1|');
disp(s2, 'оценка дисперсии');
disp(abs(d-s2), '|DX - teta2|');
ss2 = n / (n-1) * s2;
disp(ss2, 'несмещенная оценка дисперсии');
disp(abs(d-ss2), '|DX - s`^2|');


//------------------------------------------------------
disp('');
disp('Задание 1.4');

c = cdfnor("X", 0, 1, (1+gam)/2, 1-(1+gam)/2);
  // (1+gamma)/2 - квантиль N(0,1)
disp('дисперсия известна');
mxl = xsr - c * sqrt(d/n);
mxr = xsr + c * sqrt(d/n);
disp([mxl,mxr],'доверительный интервал для мат.ожидания');
disp(a,'мат. ожидание');
disp('дисперсия неизвестна');
_mxl = xsr - c * sqrt(s2/(n-1));
_mxr = xsr + c * sqrt(s2/(n-1));
disp([_mxl,_mxr],'доверительный интервал для мат.ожидания');
disp(a,'мат. ожидание');

s=0; for i=1:n, s=s+(X(i)-a)^2; end; // sum((x(i)-a)^2)
disp('мат.ожидание известно');
dxl = s / (n + c*sqrt(2*n));
dxr = s / (n - c*sqrt(2*n));
disp([dxl,dxr],'доверительный интервал для дисперсии');
disp(d,'дисперсия');
disp('мат.ожидание неизвестно');
_dxl = n*s2 / (n - 1 + c*sqrt(2*(n - 1)));
_dxr = n*s2 / (n - 1 - c*sqrt(2*(n - 1)));
disp([_dxl,_dxr],'доверительный интервал для дисперсии');
disp(d,'дисперсия');


//------------------------------------------------------
disp('');
disp('Задание 1.5');

_u = zeros(1,k+1); // границы интервалов
_nu = zeros(1,k); // частоты интервалов

// вычисление новых интервалов и частот
_u(1) = u(1);
i = 0; // cчетчик старых значений
j = 0; // счетчик новых значений
while i<k,
  j = j + 1;
  while (_nu(j)<5 & i<k),
    i = i + 1;
    _nu(j) = _nu(j) + nu(i);
  end;
  _u(j+1)=u(i+1);
  if (i==k & _nu(j)<5),
    _nu(j-1)=_nu(j-1)+_nu(j);
    _u(j) = _u(j+1);
    _nu(j) = 0;
    _u(j+1) = 0;
    j = j - 1;
  end;
end;

old_p = zeros(1,k); // старая теор. вероятность
for i = 1 : k,
  old_p(i) = cdfnor("PQ", u(i+1), a, sqrt(d)) - ..
             cdfnor("PQ", u(i), a, sqrt(d));
end;
disp(u,'границы старых интервалов');
disp(old_p,'теор. вероятности старых интервалов');

N = j;          disp(N, 'новое число интервалов');
_u = _u(1:N+1); disp(_u, 'новые границы интервалов');
_nu = _nu(1:N); disp(_nu, 'новые частоты интервалов');
_p = _nu / n; disp(_p, 'новые отн. частоты интервалов');

// теоретическая вероятность
p = zeros(1,N); // параметры известны
pp = zeros(1,N); // параметры неизвестны
for i = 1 : N,
  p(i) = cdfnor("PQ", _u(i+1), a, sqrt(d)) - ..
         cdfnor("PQ", _u(i), a, sqrt(d));
  pp(i) = cdfnor("PQ", _u(i+1), xsr, sqrt(s2)) - ..
          cdfnor("PQ", _u(i), xsr, sqrt(s2));
end;

disp(p, 'теоретические вероятности новых интервалов');
disp(pp, 'теор. вер. новых интервалов (парам. неизв.)');
disp(sum(_nu),'сумма новых частот');
disp(sum(_p),'сумма новых отн. частот');

function [ans] = stat(N,u,p) // статистика критерия hi^2
  ans = 0;
  for i = 1 : N,
    ans = ans + (_nu(i)-n*p(i))^2 / (n*p(i));
  end
endfunction

hi_2_alpha_0_99 = .. // распределение hi^2 ..
                  .. // alpha = 0.99; n <= 10 ..
[ 6.635,  9.210, 11.345, 13.277, 15.086,..
 16.812, 18.475, 20.090, 21.666, 23.209]';

h = hi_2_alpha_0_99(N - 1); // порог
r = 2; // число неизвестных параметров
hh = hi_2_alpha_0_99(N - 1 - r);

t = stat(N,_u,p);
if t >= h,
  disp([t,h],..
  'параметры известны: гипотеза отвержена (t >= h)');
else
  disp([t,h],..
  'параметры известны: гипотеза принята (t < h)');
end;
tt = stat(N,_u,pp);
if tt >= hh,
  disp([tt,hh],..
  'параметры неизвестны: гипотеза отвержена (t >= h)');
else
  disp([tt,hh],..
  'параметры неизвестны: гипотеза принята (t < h)');
end;
